# -*- coding: utf-8 -*-
# <nbformat>3.0</nbformat>

# <codecell>

##counting dna nucleotides
dna_file=open("rosalind_dna.txt","r")
sequence=(dna_file.readline()).rstrip("\n")
pair={}
print pair
for i in sequence:
    if i in pair:
        pair[i]=pair[i]+1
    else:
        pair[i]=1
print pair["A"],pair["C"],pair["G"],pair["T"]


# <codecell>

##transcribing dna into rna
dnastring="AGTTCACAGTCAGATTCCTTTTTCGTTTTGCTTCCCCGCCACGGGGTGAGTACCACTCGTAATGCGGGCGACGTGTGTTTTACGTTAGGCCCCTCTTCCTCTGCTCAGTGAGATCATATACGGGCTGCGGACTACTCCTCTACCCATCACCACTGGAATAACGTTTCCCTACGGGCAGTTCTATTAATTGCTTTGGGTCTGCAGACTCTCCCAGTTGGGGCGACTGATTGAACCGAAATTCATCTATAGATTGTGTAGACCCGACGAGCAGTGGTCTGCCCTGTCAGAAGCGCGGGTGTCCCCGTTAGGTGTTCAGTTATTTATTTCTTGTTGTGATGCAGGCAGCCACCTCGCGTATATCTGGTGTTAAAGCGAAACGCTGAAGTGACCGCTCGCGGGCCATTCAACCCCTTGTGCAACGTGCATGTACAGGGCACAATGTCGCGCAACCGTTAGGATACCTATATAGGGTTCAACACCATTATGCACTGACCTTCTTCAATTACATGCTAAGATCAACTACTGCTTGTCTTGACAGTTCCTGGGTACCTCACAGCAATGCAGCATTATAGAGGGAAGGGCTAGATCAAAATAGCAAGCCACACTGTGGGAGATCAAATCGCGTTAGACCGTGCATATAGGGCGCCGTAGGAGACGCAGGGCAGACATCGCCCACATTTCGCCAACCGCTTTTGGAACTAACCTTGGTTAATGCCTCCCCCTGTCATAAGATTCTCCGGGCTTGTCCTTAAGCTTCAATCCGATACCTCCGTACGTGGCTTAGTGGTCTAATACAGATAACCATGGTCGCTATAAGTGCATGACTCGTCGTTGAAATTAGTTAACTAATTGGTACCTTTCGCATAGTCTAGAATTACGGGTAGGGTAATCTAAATCGTGAATGCAAGGTGCTAAGAAGTATGAATTTTCGTTATTCATTAAATTCC"
rnastring=""
for i in dnastring:
    if i=="T":
        rnastring+="U"
    else:
        rnastring+=i
print rnastring

# <codecell>

##Complementing a Strand of DNA
dnastring="GAATTATCCGAAAATGCAGCCGACACCTAGGACGAGTTTCGATATATAGTCAAAGTCTGAGCTCATACCGATACCGCAGAGTAGCGCATCTCTAAGTACGGAGGGCCGTCGTTCGTACGGAACTAAGGAATATTTCCCGTCAAAGCAGCGTAAGGGGTTTGGCAGACACACAAGGAGTGACGATCGAACTGAATCACATTCTTACGTGGAAGCGCGGACGGTCTCCTTGAAAGTGGGGACGCCAACCATATTATTGCCGAGTCGCACGTTTATTTGCGCAACTACTGGTTGCTACACTCGCGATAACTAGGATCATGGTCACCTATCTTATACATCGTATGCCGCCCTATTGGAGTGCGTACTCATTGACGGTAACCAAGGCGGGCAAGCTAAAGAAATGGATAGCTTAATGTTTTGAATCGGGGTAAGGCCAGAAGTTTAACAACGCTCCTAAATGCAAAAGCAGCCGACAAAGGTGTAAGTAAAAACGGTCCGAGCACCTTGGGCGACCCGGGGCGTAGGTAGAGCCTCGTAAGTATCATCATGCCCACATCATTTGCGTACCTCGACGAAGGTCGAATCTTGACATGTGTTTAAGGTCGCGTTCTTCCTGAATTTGGGTGGATCTCAGTAGAGGGTCTGCATGATACATACCCACGTCGCGTCGGGGCCCATTGCCTGTACAGTCAGGACGCGCTCTATCATTGATGAAGTTCGCGAACACGTTTCTTTACCGGCGCTCCACGCAAGCCTGGTGCTACGTGAGATGAGGTAGTCCAATAGATTAACGACCGGTGCATAACTCGTAGATCAGAGTTTGGAAGGGTTAGTTAACTGTGAAGCCCAGAGTGTGGGCACCACTCACGGGCACCGAGAGCCTGGGCACAGAGCGCTTAATCGGGTGGGCAACTTAGTTAATGGACGGCTTTTTAGGATAGGCCCAGC"
complement=""

for i in dnastring[::-1]:
    if i == "A":
        complement+="T"
    elif i=="G":
        complement+="C"
    elif i=="T":
        complement+="A"
    else:
        complement+="G"

print complement

# <codecell>

##translating rna into protein
dnasequence="AUGUGCCCCCUCACAGCCUAUGGCCCAAUGACGACACGAAAGAGAGCUAUUAGGCCCCUUAAUAUAAGAUUGAUCUGUACCAACGACAUCUUCGUUUAUCGAGCGGAUGGGUCCGAGGCCGACCAGAGGUUGACACUACCAUGCGGGUUGAUUCAUAAAACGACGCUUCCGACCACUAUCACUAGCUCGCAUCUGCUGCACAUAGUGCUUUGCGAUGGCACCACACCUCAUAUGGGACACGAUUCCAUUAGACGACGCCGCGCGUUCUACAUGGACGUAAAUUCCGAGUCCGAAAAGCGAGCAGUAAACGGUUUAUAUAACUGUGGUGGUUCUACAAGGGGGAUUCUUAAGGCGAUUAACACCACUAUAUAUGCUCAUCUCCAACGAUCCACAGGUCGGCUGAGGAUACGAGGCUACAGUUCCCGAAGAUAUCUAAGCGUGGUUUUCCCACCCAGACUACGAAGACGUGAUCACAGUAGUGGUAUCAGAAAUCGAGCUCUGUUGGCACCGUUGCGCGCCCUAGCUGCUUUCAUACUUUGCUUGUGUAGACAAAUUAGACUCAUAGCACAGCCCCGAGUUACUCGCGAAGUGGGCCUAUUACUGACCCGGCACGUGUGUAGAAAAAAAAAUGAUCCUACGGGGGGACCCAUGUUAAUCUACAAUACAUUCCUUUUUGAACGGCUUUACUUGACUUGUCCAGUGCUUACUGGUCCAUCGGUGGCCUGGGGUAAACGCGUCUCAGUACAUAAGAACUUACGGCAUGAAUCACGUCUCGUACGCAACGGAGAUCCACACAGCACCGUAUCAUCAGCGCUCGAAGCAUCCCCUUGCAAAGAAGCACCUCAAGGUUCGUGUGCUCAGUGUACGAGGGCACGGACGCGUCUGGCCAAGGCUUCCCGACAACAUAUGGGCAAUGACUUUCACAAGUUUAAAAAACGACGUGCUGGGCCGGAUCAAUGUCUAUCCCGGACUGCAUCUCCUGGUAUGACAAGCGGAUUGCGGCGCAGCAAGUGUACUUCACCACCCGAGACUCAGGAAGUAGUUGUACACCCGCAGUAUGUUAGUCUACGGCCCCCUGAUCCCUCACCUUUAUCGACUGUCAGGGUAGAGCUAAUUGAGAAUUAUGUUGCGAUCACUAUCUUAGUAAAGAUGUACUUCGUAUUAACGCUGGAGCACAAUCAAGCAAAAGGUGCGCAAACCAGUGAGACAAGCGUUCAGUUUAACCUAGCCCCGUAUGAGAUAAAAAUCGAAGACCUACAGAAUGCAACCACUUGUCCUUAUUGGUGGAAACGAAAGAAUGUUGGAGACCUUUGCUACCCUACCUUCCCAAAAACAGUGAAUCGUGUCAUCUCACUCGCGAAGACCGGCCGACGGGCACUGCCUCCGUGGCGGAUAGUAGAAGCUGGAAGAACGAUGUCACAUCUUAAAGUGAUCUCGGUCGCGGAGCGAGUUGCAUUGAACACAGGCCUCAAGAUUGCGGCUAUCGAAAGUGCAAACAUAAUACCACGUAAGAUGUCCCUUCUUGGAUCAUCUAGACAACAGUAUAAGCCGGAUAGCCUGGGCUUCGGGCAAACGCUACCCACUAGACUGCGUAUAUCCCAGCCAAACACCGUGACCAAGCGCGUAGCAGCCCUCGACUGUCAUGGCGCACUUUCCUACCUGAGUCUCUGUCUGGUACCGCCGAGUUCUAACUUAAAGUCUAGGAAACGUCGUAGCGCACGUAACGAUACUGUAGUUUCGUGCCUUACUACUUACGGGAGAAUGCGAUCGGUUACAUCGACCCGUCCGACUUCUACCGGGAACAGUUAUCUUCUAGAAAUGCCUGUUCUGUUGAUCCUCAUCGGAACACGAACGGCUGCAAAUGGGACGUUUUCUCGCACUGGCGCUCCAACAAACGCUGCAGUGGGGAUUGGGGUAGCGGGCCGUACACGAGUUUUAGCGGGACUCGACCUAACAUUUCCCUCCCAGGCGCUAAGUCGCGAUGUUGGCCAGCUAUUCAGGAGACUACAGUUAAGGACCUGGCUCAGACUGUACAUGGGGGGUCGUGAGCCUUUGGGUCAUUUCGGCGUCCGGCGUGACCCGAGUGUGGUUACGAGGAGGCGUCCGCUCAGCUUGGAUCAGCGCCCAUUCAGGGUAUCGGAAUUAGUGCAAAAUACCCUGUCUACCGGAAGAUGUUGUGAGUCGCCUUGGUACAAAAUCAAGUCUCACCGCAACAUAGAGAUGCUCCUAUCUAAUAGAACGCUUAUCAUAGGUAAUGCGAACUUGGUACUGUUACGCCUCACUGGAUCCAAGUCCCGCUGUCUGCUACUCAGUCUCUCGCGGCCCCCUCACAUGCCAGAUCAGGCCUCAGCACACCAUGCCUUUAGGACGACUCUGGCCCCCCAUCGGGGGGCCAGCGCUUCUGUACUGUCAGCAGAUUUAUACCUGUGCCAGUCUCAAACGGGGUGCCAGACGUAUGGAUUCAUUUCCAUGUAUUCAUUUAUUACUGUAUUGGAGAAGCUAAAAAGAAAAAGACUGGCAUCCAGGUGCGUGGAAUUCAAGACGCCUAUGGGUAUCCAGGCUAGCAUCCACAUGUCUAGGUGUCUGCCUUGUCGAGUGGUUGCGCCGAGGCCAUGCGAAGACGUCCUACAUACAGGCGAUGCGUUAAAGACGCCACGCGCGUGUGCGUGGAAAGCUUGUAUCCAAAGAUUACAGCAUCUGACAGAGAAAUCUCUAUACGUACACCAACAAUACUUGCGGCUUAAGUUACGCUCACGAAUGCCACCCUGUACAAAAGUAUUCAACCGAGUGCUCUCACGGGGAUUCCAGAGGAACGCUGGGCUAUUACGGUCACAUCAUCCUUUAACUUCUGACGUGAUUCCUCUAACUAGAAAAAGUUACCACAAGGGCAGUUCCUGGCCGGGGGCGGUACAAUUACCCGCUGCAUCAUCAACGUUACUUAAGCGCGCUGAGAACCUUGUCGCUGUCCUCGCUUUGCGCUGGAUUAGUGAGCCGUUAGGCGUAGUUCCGGUUCUGUUGAGUUCUCGACGGGACUGCAUACAACAGAAUCUAGUCUCGUACCACGUCUUCAUUCGUAGUUCGUCAUGGGCAGGUAACCACCCGUGGUUUGGUAGAACGAACGCCGAUGACCCACCCCCGAGCCGCUCCGAGCAGGCCCCACAUCUGGACCAACGAGGUAAGCCUGCAACGACACUUACCUUUGGUGACACUAGACCUAUCCAACGAUACAUCGGACCCCAGAGGUCGCACAAGCAACCAACGAGGUUCUUCUUGCUCUAUCCCGUUAUAGGAUGCGUCAAACGCACAAAAGGCGAUGUAGCCUUGGAUUUCAACAGCGUUAAGCCAAAAUAUACCCGCCAAGAUGAUGCCACUCGAUCACUUGAGUAUAAUCUCGGAACCACCAGUCUCUCGCGCAAAGGAUGUAUGCGGCGGAAUCAAGGAAUGGAACACACGUUCGGUAAACUUCUACUGGAUAUACUGAGGACGAACAAGGCAAUGCAGACCGUGAGAGAUGAGAGCGACUCCAUGACCGGCGGCCGUUUCCCCGGCGGGAGCUAUGGGCAUAUUAUUUGUGCGAUCAGAGGAGCGGGUGGCACGGGAGCUACUACGCGUUCUCCGUAUGUCGCUGUAUCUUGUUUGCGGGACUCUCACGGGUUUCAAUUAAAGGUGAUGGCAGGCAACGCGGCGCGGUCGUGUGGCACGUCGAAAUCACUCGGUGUAUUGACGAUCUCUUUGCACUGCGCAUGGGUGGCCGAUAUCCGACUAUCGCAAACCUCCCGCCGGUCACUGCACUUGUGUUAUCAGUCUAUAAUCCGCGGUGGGCGAUGGAUAUUACCAAACGCAGUACUUAUAUCUACGAAACGCUCCAGGUACGGAACAUGCAGUCUGCCCGAUCCCGUAGACGGUAUCAUUAUCCGAGCACAUGGGCGCUUGGCGAAAAAGUUUUUGGGCAGUUGUUGGACUACGCUAGGCUAUGAUAAACGUUGUGCUCUUCUAAUUAGCGGCGGCAUGGAGAAAGGGGGACGACAACGCGCGGAGCUCAUCCCAAACGUAGUCAAACAGCCGGCUACACUCGAUAUGACAACCUUGCCAAGUGCAUACCCGCUUAUCUUAUGUGGACAUCUUAAGGAAGUGGGAAAGACUCUUGGGAACGGGGUGCCUCUAUCUAUUCCUCCGGCGACCAAAGACAAUGACAUGCAAAAAGCUCAAUGGGAGACGCGUUGGCGCAGCAUUAGUCAAUGGCUCAGCUCGUCACCAGCAGCACAACCGCCUGAGCGAAUGGCAGCGCGACGGUCAUUGAAGUCAUUACAUUUUAUGUUGCUCGGGGUUGGGAUCGGGACUUACAUUGAAGGAUCGGAUGGGCCCGCGAGGCUACCCAUUGGUAAACGCUUACAAAGAUACUCCUGUGCGUGCGCGGGGACAUAUCAAGAUAGAGGUAUCGUCGCCCCUACACAGUCGGUAUCUGGUGAUUCGUCGCGAUCCAGACCAUUUACGCGAGGACUCCCCCCCUUGUGUUGCCAUAAUGGUGGCACACUUAAAUGUCCGGCUUCCUCUUGUGCCAGCAAAGGGGACUCAUCGGGUUCGCCAAAAGCCUCCAGAGAUGCUGGAGGCACUUCCCGGGCGAGCAACGGAUCAGACGGGAGCUUGUCCAGUGCCUGUCACCAAGCUCCCGCUUGUGAACGUUCAGAGUUACCUGAUCGCGAGUGUGUGUUAGAAGUAUUGUGGAAAGGUGAUAGAGCCGAUUUUAAAAGCGAAUGGCUGGUAGCCUUGUAUCAAAUGCGCGCGGACUUACCUUUACCACUCUCAAGGGACGCCAAUGCGGGCUCUUAUCUCCGGCCUCGACCACUAAGUUAUGAAGUGCGGCAUAGCCCAGCAUUAAGUUUAGACGUCGGCGGAGACACAAUAGUAGUAUUACUCACGGAUAAGAUGACUUUAGGAUGGCCUAAGGAAGAGCCUAGCAAUACGUCCCUUUUGACUUCUCUUCUGCUCUACUCAACACUAAUCAGAAGCAGUGACACAUGCAUGAUCAGGCUCCCGUUCGCCCCUCUUAGCCUCACUCUCUCUUUGAAUCGAGGCUGGUUGGGAGCAGGGAAAUAUUUUGGGUGGCAGCCGAGUGCCCGCACGACUCAACACUCAGACCUUGUGCUUCCGAGAGCCAAUAGGAGCACCGCUUGCCUUUGGUUGCUGCAGUGUCUAUGCAUGAAGGGUUCUUAUAGUCGCUUAGUGCACCAUUCCUUUAGGCCCCUAAACGUGUUCUCAACAGCAAUCGAAAACCCCGCCUUCGAAAGAUUCGACACACCGCUAGACCCCGCAAUGCGACUUGAGGGCACAGUUUCCUCCAGGGGGGGUCUGAUCUUUUCCUCUCCUCGGAGCGGGUUCCUAGGGGUUUAUGAACACAAUAAUAAUUGUCGGCUUACUGAACGUCUUGUGAAACCCCAACAAAAAGUCACGUUAAGAUACGGCAGUCUCAGGCUAACACAUACGAGGCUUAGUGCGCUCAGGGACAGCUGGCUUCCGCUUAACGCGAUUACUAUAGCGCGAAGCGCUGUUGUCCAUCGGGACUGUAUAGAUAAAAGAUUCACCAGGGCAUUCCCUUGGACGAAACUGUUUGUACGUCAACCGUUGGUCCCCGCUGACAGCACUCGGGCCCCCAUCGAGCGGUUUAGAAUUGAAAGCCGCCCACAUGGGGAUCCGGUAUGUGAAACGCAUAUGUUGUCUCCUCACACAGCAACGUGGGCCCGCGCAUAUCCCUUCGUCCCGUGCAGACGAUCCAACGCCAGAUGUGAGCGGGUUGAUAUACCAUUCACCGAGGCUCGACAUUGCCUGUCCUCUGACAAAUGGCGUAUGGUUAGUUAUACGACCUAUCACGUGGGCCAAGAUCCCACCCAUUCAUUCAGAACCGGUCUCUACGGACUUGCUUCUCCCGGUCUAGCCUCCGUUCACGGUUCGCAUGAGGCAACAGAGCGGAUUACCUUGCGCUGCAGAUGCUUAUUCGACUGGAAAGUUAGGCCGUUGCCCGGUAUUUACUAUAUACCGAACGUUCCCCCACCCCUAUCCUCAUUCUUAGCGGCGCAAGUACUUUUGCAAAUGUUGGGUGGUAAAAGACAUCGAUCUAAUGAUAACAUCGCCAUUAGUACUCGGAUAUCAUCGUCUGAACACAGAGCUUACGCCGCGGGAUGCCAUGGCUGCUACUUCAUUCGGGUAGCCUCAACUUGGUUAAACGCUACCUCGAACUUGCGUGUCGCACUACGUGCGGUUCAUCUCGUCACAAACCGGACCUCGUCGUCUCCAGCAUUCUCGUUUGGAGAGAGGAUCCUGCAUACACAUUAUCCAACACUCCGAUGGUCGGUAUUUCCCUGCAUGCUGAAUUUUCUUACAAAAAUGUUUCAGCCAAGGGAUGCGGCGAGCAAGAUGGCUAAGGUCCGCCUAAUAGGCUCAUUGCCUAUCCAACUUGUCCUGGCGCGUUGGACGGUCGUCCGCGGGCAUCUGCUGAAUCUGAACAUUCCAAGUCACUCCGACUAUAUUCAACCCCACCUCGACGAUAAUAUCGGAUGCCCCCCUCGCGGUGUCCCUUGGCUCCUGCGGUGGCCUCGAUCGUCGGCAUUACAGCUGUUCGAAAAAGCGAUGUCUGGGCUGCAAACAUUCGUUGGCAUCGUGGUCAUAACAGCAAGGUUUGUGCGAGCUCUUGAUUACUCUGCCACUUGCGAGUAUGGCUCUUGUAACUGCCUACCACCUUCUGUACAUCACGGCAUCCCCGCGCCAGCGAACAUGAUGAAAGACCAAGACAGUGCCAAAGUGCCGCCGCCGGCAGGUGGAGGAUUUGGUAUCUGCCCGUCCAAAUCAAGGAAACUGGUUCCUGUCUGGAGGUCAAGCCACGGACGUUGCCGGAGGCAAUCAUGGUCUUUUUGUGCGUCUAUGGGUCAUACUCGCCUGCAACGGUCAAACUGCUCGAGGACCGAGAGUCUACGGAACCCGUAUCCGAACCAGCGCCGACCAGGGCGGCUCUGGAAAGGACUCAGGUACCGACAUCGAGUUAUAGUUGCCUCUACGUAUUUAUAUACAAAGCAUAACGACGACCUCGUACGACAUAUGGAUAACGGAGGCUCAACCCAAGUAAGGUACAUAAGUCUUUAUUCUUUCGAGAGUCAGCAUGGCAUCUGUUGUUUAUGUGUCAUCUCGACAAUUCCAAAGGGAACCCAGAUCACGUACUUCGGAACCUCCGUUCAUUCAGCAGGCGCGUUAUCCCCCCCGUUUAUAAGAGCGGUUGUCGACAGAAUUAAUCGCCCGAGGGGGAUUUCCUACGUAGCACACUCAUUUCUCUGCAGGGGACCUGCGUUGCUUCAAAGGCUACUUUUUUUUAGAAGACGAGUACCUGACAGAUCUGCGGGGUGGAAAGCUAAGGCACAUGGUUUCAAGUUAUCAAAGAAAAAUAAGGAAAGGACCUAUAAUUCCUCCACCCAGGAUUCGUCAACAGUGAUCCCCGUCGAUAAUCCCUUUAAACGGAGAGAAUCAGAUAAUAUACUCAGAAGCUACACAACGCGCCGGUCUAGCGUAUCACUGUGUCGCACCUGCACCACUGGUUUUGAGGCGCACAGGUGUCAUAGAUAUCGAUUUGGUAGUUUUAUGGGCUCCAUUAGUAGUUAUCUGGGUGAUGUCCUUUACCUCGGCCUUCGUUUCCGGCUUUUCGUCAGCCCACUGGGCAAUGUAAUUCCGUCUCUACUAGGGGGUCCCGUUCUGGUUCCUCCGACUUGCGCAAUCAGAAUUCUUGAAGCAUGCUGCAUUCUAUCGCUCAAACGGCAUCGAUUAAGACGCCAAGGGUCGUUAUCACGAUAUUCGGAGAACUCUCUAUUAAAGCGAACCACGUAUCUAUUUACUUCUACAAAGUUGGAGGUGCAGUACUACGGACUGCAAAAAAUGGAGCAUGGCACGUUCGCUGCAAUCACGAGGAGGCACAUCAAGUCUUUACGCGUAAGAAUCGUGCCAUUCGGGUGUGGGGGCGACUCGAUUGUUCAUCCGUACGCAGGGGUGCUAAAAUCAAAUUCCGAGGCUACGCGAUUCGACCAUAAUAUCUCCUUAAUCGGGGACAGAAAAGCCCACCUUGCCUUGUAUAGGGUGCGUUUAGAUGCUAUCUCUUACGGACGUUCACCUUUUCGUAGCGACACUUUUGCUCAGGUGGCCGUCAUUUACGAUGAGUCGUAA"
codon={
    "UUU":"F",
    "UUC":"F",
    "UUA":"L",
    "UUG":"L",
    "CUU":"L",
    "CUC":"L",
    "CUA":"L",
    "CUG":"L",
    "AUU":"I",
    "AUC":"I",
    "AUA":"I",
    "AUG":"M",
    "GUU":"V",
    "GUC":"V",
    "GUA":"V",
    "GUG":"V",
    "UCU":"S",
    "UCC":"S",
    "UCA":"S",
    "UCG":"S",
    "CCU":"P",
    "CCC":"P",
    "CCA":"P",
    "CCG":"P",
    "ACU":"T",
    "ACC":"T",
    "ACA":"T",
    "ACG":"T",
    "GCU":"A",
    "GCC":"A",
    "GCA":"A",
    "GCG":"A",
    "UAU":"Y",
    "UAC":"Y",
    "UAA":" ",
    "UAG":" ",
    "CAU":"H",
    "CAC":"H",
    "CAA":"Q",
    "CAG":"Q",
    "AAU":"N",
    "AAC":"N",
    "AAA":"K",
    "AAG":"K",
    "GAU":"D",
    "GAC":"D",
    "GAA":"E",
    "GAG":"E",
    "UGU":"C",
    "UGC":"C",
    "UGA":" ",
    "UGG":"W",
    "CGU":"R",
    "CGC":"R",
    "CGA":"R",
    "CGG":"R",
    "AGU":"S",
    "AGC":"S",
    "AGA":"R",
    "AGG":"R",
    "GGU":"G",
    "GGC":"G",
    "GGA":"G",
    "GGG":"G"
    }
proteinsequence=""
n=len(dnasequence)
for i in range(0,n,3):
    proteinsequence+=codon[dnasequence[i:i+3]]
print proteinsequence

# <codecell>

##calculate protein mass
proteinsequence="IYLMLCGYTVTQGCTCADMESRYSNPTCLFRGQHFCATLYSREGFTAPFKAGSIWMWLNPDQNLNTVPCDELWITFCVGPPIVTPIPIFSMYSNEKDAWQFIFWWFEDMHDCAFTFEGKMCNECAALCDSMPNRHCTVHYEGVIRWSNEPIPRYPWRMHFTMNGVSAYTRYTWQEERDNQMYENNWCRAELNSWQCELFFKKWEFNTDVCTRSGSWVRHYRLGEQGNQRKWGWEEQIFLQCDDSFRWFAPLCSYQFIECCARSWATQPNRQVVVMWFSARYNCHPERFQCVKIFRFHLSHPYRHWEDTKNCYRGTDWDPRKCTCHHHMPDYSWGYHAFWNLGWKNCSGQWSGEHYDMQIANCNQNSETSVCPMAGNYMSCAFKYSSMVHFTERISMNMANDFWVVKCFLHIFVIGWHWHVKEPLVWRILMYKCRPAASKHMGDQMHQVWMVIMPKCWRGCHALEESMTEQRPSSDCTMFIQFRNNFPEWPASWYWPHNHMWQNWQICFMWFLWWLPAHENCKQTGVHPCRVMVHKRTTPYCWECCWERNTLSWNVSPTLCDGLCMDLFNSVYVDFNRRHYLTGPNSQQKRETFQPWTPGWCNTKFRKPPVLYMPRGIPSHHRQSIHPTQSMWSMVHGANWHNTDFLFDKCHTASYTPEWIVYMYLMKEWRQDIKVNNAKEPKYMQEVWVFEHWVELTMHVAFNDEKNVHGFENLNPMDSWIYCYLTQTYPVVAKQAQPCINDEDQEWFADEPAMLKMVPTNQAWACMNWCRDNIKDRFYIGCDEKWKSNPFCHELGGPDGFVFSAKSRFFGVIFYCGNENQMMCGRAE"
molecularweight={
    "A":71.03711,
    "R":156.10111,
    "D":115.02694,
    "N":114.04293,
    "C":103.00919,
    "E":129.04259,
    "Q":128.05858,
    "G":57.02146,
    "H":137.05891,
    "I":113.08406,
    "L":113.08406,
    "K":128.09496,
    "M":131.04049,
    "F":147.06841,
    "P":97.05276,
    "S":87.03203,
    "T":101.04768,
    "W":186.07931,
    "Y":163.06333,
    "V":99.06841
    }

weight=0
for i in proteinsequence:
    weight+=molecularweight[i]

print "%.3f"  %weight

# <codecell>

##genbank introduction
from Bio import Entrez
Entrez.email = "athenayxw@gmail.com"
handle = Entrez.esearch(db="nucleotide", term='"Harpegnathos"[Organism]', datetype='pdat', mindate="2010/05/17", maxdate="2011/07/30")
record = Entrez.read(handle)
print record['Count']

# <codecell>

##Introduction to Protein Databases
from Bio import ExPASy
from Bio import SwissProt
handle = ExPASy.get_sprot_raw('P0C1J2')
record = SwissProt.read(handle)

for i in record.cross_references:
    if i[0]=="GO":
        if i[2][0]=="P":
            print i[2][2:]

# <codecell>

##Finding a Motif in DNA
genome="GATATATGCATATACTT"
domain="ATAT"

for i in range(0,len(genome)-len(domain)):
    if domain[:]==genome[i:i+len(domain)]:
        print i+1,

# <codecell>

##Finding a Motif in DNA2
import re 
genome="GATTAGTGCGCGGCACGCGGCAGCGCGGCAGGACCGCGGCATCGCGGCACGCCGCGGCAGCCGCGGCACGGGCTGAGTCGCGGCACCATCGCGGCAGTTCCAGCACTTGCGCGGCAACGCGGCACAAGGAACGCGGCAGCGCGGCACGGACGCCGCGGCATCGCGGCACGCGGCACCCTGGAACGCGGCACGCGCGGCAAACCCGCGGCATCGCGGCACGCGGCACGCGGCACCGCGGCACGCGGCAGGGTTTGGGCTACGTGCGCGGCATTACGCGGCATACCGCGGCACGGGTACGGGTCCGCGGCACACGCGGCACGCGGCATCGCGGCACGCTCGCGGCAACTATACGCGGCACGCGGCAACGCGGCATACGCGGCATGAGCGCGGCAAATGCTTTCGCGGCATCGCGGCACGCGGCAGAACGCGGCAGGGTTAAATCGCGGCAATGCGCGGCACGCGGCATCTGCGCGGCAGTCTCGCGGCATCGCGGCACGAGGCGCGGCAAGGCGCGGCACACGCGGCATCGTTCGGCGCGGCAGCGCGGCATTCCAACGCGGCACAGTTCGCGGCAGACCGCGGCACTCGCGGCAGTAGCTGCGCGGCAAACGCGGCATCTGCGCGGCACGCGGCACGCGGCACGCGGCACCTCTTCGCGGCAGGTCGCGGCACTCTCCATTAGCGCGGCAACCGCGGCACGCGGCACAAACGACGCGGCAACCGCGGCACCGCGGCAGGACGCGGCACGCCGCGGCACGCGGCATCGCGGCACGCGGCAGCGCGGCATCGCGGCAACGCGGCACGCGGCATCGCGGCACCACACTC"
domain="?="+"CGCGGCACG"
domain="("+domain+")"
#print domain
for i in re.finditer(domain,genome): 
    print i.start()+1,

# <codecell>

##Open Reading Frames
dnasequence="AACTTATCTCTGCTTCCAGCATCACCCACTCAGGGGCATACTATTACCATTTCTGATCTGTTAGCGCCCAGGTATACAAATATTGTTCGAACGGGAAGACGGCCCTACCTTAGCTTGGTAGCGGATGAAGTTACACTTAGGAAATCTGAGGGTGGTCGTAATGCGAGCGTAATATAGGGATGCACCACTCAGGCGCGAGCGCTCCACTCTGGTGGAGGACGGAGCATACAGCCAGAGTGCGGTCCAGGTACATCGGCCCCAACGTAAGGTTACAGTTCGTGTACCATCGCATGTGTGCCTGTAATAACATCAAGCAGGTATATAAACCCGAATCCACTATGCCTTGTCAGCGTTCTCTACGTATGGCCTATGGTACGCTGGAGTTCTTTACCTAACACCGAGTGGCCAGCGATGCATACACCACCGTCGGCTCATACGCATCGATAGCTATCGATGCGTATGAGCCGACGGTGGTGTATGCATCTGACACGCGCAATTAACACCTTCACGAGCCCATTAACATGAGGGCACCCACGTATGCGACTTAGAACTCTCGGTCGTTGCGCATGTTTAGATGATGTGGTAGGAGGCCCCTAACTCCTTCAAACTGCTGGTGGAAACTTGGTGAGATACGTAACACTGCCACTATAATCGACGCCCGCCTTTTCCTCTATCTGGAACCCCACGTGACGCATGATCATCCGGGGGCTGCACGTGTAGACTACAGTAACATCATCTGCGCACCTTGTGGATCTACACCTGCTAACAACTACTATGACGTGATTATCAGGTGGCGGACATTGTTTAGTACCAACTAAAGTGGGGGAGTTCAATGCCTGCCCACTACCTCTTGAGGAGCGGAGTAATAGCGTTACCTTGCTACATACGCCCATA"
codon={
    "TTT":"F",
    "TTC":"F",
    "TTA":"L",
    "TTG":"L",
    "CTT":"L",
    "CTC":"L",
    "CTA":"L",
    "CTG":"L",
    "ATT":"I",
    "ATC":"I",
    "ATA":"I",
    "ATG":"M",
    "GTT":"V",
    "GTC":"V",
    "GTA":"V",
    "GTG":"V",
    "TCT":"S",
    "TCC":"S",
    "TCA":"S",
    "TCG":"S",
    "CCT":"P",
    "CCC":"P",
    "CCA":"P",
    "CCG":"P",
    "ACT":"T",
    "ACC":"T",
    "ACA":"T",
    "ACG":"T",
    "GCT":"A",
    "GCC":"A",
    "GCA":"A",
    "GCG":"A",
    "TAT":"Y",
    "TAC":"Y",
    "TAA":" ",
    "TAG":" ",
    "CAT":"H",
    "CAC":"H",
    "CAA":"Q",
    "CAG":"Q",
    "AAT":"N",
    "AAC":"N",
    "AAA":"K",
    "AAG":"K",
    "GAT":"D",
    "GAC":"D",
    "GAA":"E",
    "GAG":"E",
    "TGT":"C",
    "TGC":"C",
    "TGA":" ",
    "TGG":"W",
    "CGT":"R",
    "CGC":"R",
    "CGA":"R",
    "CGG":"R",
    "AGT":"S",
    "AGC":"S",
    "AGA":"R",
    "AGG":"R",
    "GGT":"G",
    "GGC":"G",
    "GGA":"G",
    "GGG":"G"
    }
reverse_complementary={'A':'T', 'T':'A','G':'C','C':'G'}
reverse_complement_sequence=""

#generate reverse complementary seuqnce
for i in dnasequence[::-1]:
    reverse_complement_sequence+=reverse_complementary[i]

#find start locations
translation_start=[]
reverse_start=[]
for i in range(0,len(dnasequence)):
    if dnasequence[i:i+3]=="ATG":
        translation_start.append(i)
for i in range(0,len(reverse_complement_sequence)):
    if reverse_complement_sequence[i:i+3]=="ATG":
        reverse_start.append(i)

#find ORF
orfs=[]
for i in translation_start:
    start=i
    frame=i%3
    orf=""
    for j in range(start,len(dnasequence)-3):
        if j%3==frame:
            orf+=codon[dnasequence[j:j+3]]
            if dnasequence[j:j+3] in ["TAG","TAA","TGA"]:
                if orf not in orfs:
                    orfs.append(orf) 
                break
            
for i in reverse_start:
    reverse_start=i
    reverse_frame=i%3
    orf=""
    for j in range(reverse_start,len(reverse_complement_sequence)-3):
        if j%3==reverse_frame:
            orf+=codon[reverse_complement_sequence[j:j+3]]
            if reverse_complement_sequence[j:j+3] in ["TAG","TAA","TGA"]:
                if orf not in orfs:
                    orfs.append(orf)
                break            
        
for i in orfs:
    print i

# <codecell>

##Counting Point Mutations
sequence1="AGGGGTTCGACTATAGAGAGGTGGCAAGATAAGTGCAAGACTCTATGATAACTACAACAACGATGGCGCAGTTCGCCTGGATCATTTTCTAAGCGTGAAAAGGTTGTCTCTCTCTGGTAGATAGGTGTTAACTGGCCGACATTCTTCACGGGTGAAATCAGTAGTGGTGTCATTACGGTACCTATACAAGTAAGTGAAACTACCAAGGCGAACGGGTAAGGAGTGGGAAAGTGCTATAGCAAGGAAAGCAGCGCATGCCATGGTGTTCACTCACCGCCGAAGCTACTTAGGCGGGAGCCCCCGTGACACAATCCACGGCTAAGTCCGATTACAACAATACAATCTAAACGCGGGGCCAGGCTTTCGGGTTACAAGGGCAATGTTGCGACGAAGCTTATAGAAGGTTAAATTGAGTAGTTGGGATGAATATGCTGACGAGGACGAGTTGCAACTCCTTGAAGTTCGCTTTGCATATTCGAGTTACCCGTGTTCGATTTGATGTCACGGAGATGAGTAGATTTCATAGGGGGAATACCATTGAAACACCTGAGACAATCCGAGATGCATCTAGGAAAAGATGCCGTCAAATAACTCATCACCGCGCGGATTCCTGGAATAGGGTAGGCGGTAAAGGAATCCCTAAAATATCTTCATGCGTCAACACACGAATGCGCGATTGCTATGTTATTGCCAGTGCTTCCCAAAATAACACATGCGCAAAGCATTAACATGAAAACCGGTAATCCATGTCCAATGCTATGCCCATCTATCGAAGATTTCAGTTAACAGCAGTCCAAAGGTGCTCTATGCTGTCGCCGACTAGGTTCGTAATCAGTTCTTCTTGCCAAAAACCGTGAAACCTGGTACACCTATATAGTAATCATATAGACATTATCCAGAAGGGGGAGACCGAACCTATCTGCACCTTGGCCTTGGTCCTTTCTACCTGCAGCTCAGGTTGGGCATACATCCGCTAAAAGAGCGG"
sequence2="ACGGGCATTCCTTTAGTGGGCCGGCAAGATATACAATATACTCGACGAGTCTTCCAACACCGAAGGCAAACGCCGCGTACAGTAAAATCAATCACTGAATATGAGCTCTCGCTAGGCATGAGCGCTGACAATCCGTCGGTACTCTAGCCGTAAGAGATCAATACTAGATACTTTTCCTGAACTTCACCAGTCAATGATAGGAACGGCACGAAATCGGGAGTGGTGAGTCATTTCTAAATCAGATTGTGACGCGCATTACATGGTGTTCAAGCAACACGACAACACCTTGTCAGAGGTGTACGGCTAAAGCATGCAACCCGAGTCCGGATTACGCGAATCCGATAAAAACATGGCGTCACATTACTAGTGACCTAGGTCAGGTTACAAAGGACCTGGATTTAGTTGTTAGCCGCAAGGTTTGCACACATAAGGTGACATTAGCTTCATGCAACGTATCAAACTGGGATTAGGAACTATATGGTACTCCGTCATAGATTTCTCTTTATGTGTTGAATAGGTTTCAATAATGTTCTACATGAGAATAACTAGCAACAAGCCCCGATGCGTCTAAAAAACACAGTCATTATAGCACACGCCTACCTCCTAGTATCTTAACACTGTAACCGGTAGAGCATAGGCGGACAATATACATAACCGTGAACTTACCAATCAACGATGGTCATGTTATCATCAGCGCTTTCCAGCTTCACGAGCCGCCATGTGACTATCAAGGCTTCCCGTGATCCGCAGCGGCTCCCCTGCCCTTCTATCACAAATCTAAGTTACCTGGCGAACAAACACCCTCCATGGTTTATGCGACTTCATTACTGATCTGGAAGGCATTCGCTTACCGCGTATTCCTAGGCACGGACAAGAGAGTCCAAACCAACATTTCTCTCCGGCCGGGGATGGAAGCACGATGCCCTGCGGCCTCGCCCTTTTCCAACTTAATCGCACGTATCGCACGTACCCGCTAAATGATGGT"
count=0
for i in range(0,len(sequence1)):
    if sequence1[i]!=sequence2[i]:
        count+=1

print count

# <codecell>

##Counting Point Mutations2
sequence1="AGATTTACTATCCTCCCTAGCGAAGGGGAATTAGGATTAAGAGGACTGGGTATATTTAGATTATGCCGAACCCCACTGGTGCACAGCAGATTCCAACTACGAATCTACGTGTGAATCAACTTGCGCAAAGGTTTCTTATGGCAGTTCGAGTCGACTAAGACATGAAGCAACTGCAGGTGTTCCGTAGTAGGCCAGTCACCCGCTTAGGGGGCCCGATAAAATTCGCATGTGATTGTTCTCAGCACGAGCGGCTACACGGGAAGTGACGCGTGCATACTCCGGAGCTCTGCATTTAGCATGTGGACACCGCCGGTAAACTGTGCCTAGCGCCGAAGAGCTGCTAGTGACGGTACGCCTGAGGGAATTCAGTCCAAAAACACCAATGCCGCCTCTGTAGTATCGAGGTTACCAGCCTGCACACTGAGAACTTATCGTGATATGAACTATGTATTTCAAGGTGGAGGCTGGATTCCCATTAGGCAACAATCGGGAAGGTTGCTGAACTGAAGTTATCAAAGTCCGCTCAGAGGTAAACTCGCGACATGAAAGATACATTCACCCACACTCTCAGCCAAAAGCGAGGTTCGGGGAACGACGATATGGTAGCTGGCTGTACAAAACACATCGCGAACCACGCTAATAGGAGATTTAACCCTAATTCATTCCCGAAAGTTCACCGTCGATTTTCGAACACCACCTCCCAATGATCCATCACCGCGAAGAAGATGCGTCACCCTCCAAGTCTTCACGACTGGACTATGCAGACTAGGGGTCTAGGCGAAGAGCACTCACACGACCGCATCATCCCACGCGGGCAGGTGACTGGTACAATGGATAGAGTTCTGGACTCCGTACAGCATTAACTTTCACCATGCGCGATTGGGTACGCGTCCAAGCAGTGTTTGGAACGCTCTCTCGATCTCACGGCCTTATGACGATCGGTATCAGGCTTGCCC"
sequence2="CTTGTGACGTACCTTGCCAGCGACGGGCAAGTAAAAGTATGATCAGGTGGTCTATTTTACGTCAGCGGAAATTCACTCATACACATCAGTCTACACCAACGACCCTACTAGCGTCCTACCTGATTACATGCTGTATCTCGGCAAATCCGTTCTACTTAGACGCCAAACAGCTGCAGGTGTCCACCCGCGCTCCACGGCACTGAATGCATGGCCCTATGTATCATCCACGGCAGTATTCCGCGCATCGAGGATAACACCGGTGATTACCTTTGTACTATTCTATGCGAGGATTCTTTTTATATGTAACAGCGCATTAAAAGGGGATAATGCTTACGTAAGTTCACAGAAGCACCGCATCAGCAACATCTTTCTGAAGACTCACTTGATGCGCCTCATTGGTCAAGTTTAGGATCCTGAGAACTCAGCACCTAGAGCTCCCTGTACCCCTTAGGACGCGTTGGTGAGTGATCACCCATAGTCGAGCATACGGTAAGGCTCCTGTACTGTATTGATTAGCATATGGCCACGCCTTTTATTGCCACAAGCAAGATAAAGTAGCCTTCGCTCTCTCCCCCAAGTGGGCGGGCGTAAAAGGTGTTACGAAAGTGGGGTCGATAAAACCTATCGAGAACCGCCATCTTTCGGGTTTTAAGGCCTATGCCTGCCTTGAAGTACTCCAAGCATATGCAAGGAGCATTATCCGGAGATCCATCGCTGAACTGGGGATGCGACACCCACGGGGGTCCCATTCCATGTTTCGTCGCTATAGTGCACGCCGATATGATCCCTCCGAGCCCCCTGGTATAGCACTCCATCAGCTGAGTTGGACGTGCGCTGGAGATCCGGGAATAATAGAGCATTGGCTTGCAATATGTGCCATTTGGAATGGGACAAGGGTGTGTTAGGTCCATTCTCGCCAGTGCGGCGGGAGAAAGTGGTACGCGTCAGACTGAGAT"
count=0
for i in zip(sequence1,sequence2):
    if i[0]!=i[1]:
        count=count+1
print count

# <codecell>

##Enumerating Gene Orders
import itertools 
k=7
full=range(1,k+1)
permutations=itertools.permutations(full)
summation=0

for i in permutations:    
    summation=summation+1
    for j in i:
        print j,
    print 
print summation

# <codecell>

##computing gc content
gccontentfile=open("rosalind_gc (1).txt","r")
gccontentlines=gccontentfile.readlines()
#print gccontentlines
gccontentlist=[]
for i in gccontentlines:
    if i[0]==">":
        gccontentlist.append(i.rstrip("\n"))
    else:
        gccontentlist[len(gccontentlist)-1]=gccontentlist[len(gccontentlist)-1]+i.rstrip("\n")
#print gccontentlist

gccontentdict={}d
for i in gccontentlist:
    gccontentdict[i[1:14]]= (i.count("G")+i.count("C"))/float(len(i)-14)
#print gccontentdict

##iterate through the dictionary and find the key corresponding to the maximum
maximum=max(gccontentdict.values())
for i in gccontentdict:
    if gccontentdict[i]==maximum:
        print i
        print gccontentdict[i]*100

##sort the dictionary first
sorteddict=sorted(gccontentdict,key=lambda x:gccontentdict[x],reverse=True)
print sorteddict[0]
print gccontentdict[sorteddict[0]]*100

# <codecell>

##Fibonacci's exercise (dynamic programming?)
n=33
k=3
grownup=[0]*n
babies=[1]*n

for i in range(1,n):
    grownup[i]=babies[i-1]+grownup[i-1]
    babies[i]=k*grownup[i-1]
    
print grownup,babies
print grownup[n-1]+babies[n-1]

# <codecell>

from Bio import ExPASy
from Bio import SwissProt

idfile=open("rosalind_mprt.txt","r")
idlines=idfile.readlines()
idlist=[]
for i in idlines:
    idlist.append(i.rstrip("\n"))
#print idlist
sequences=[]
for i in idlist:
    handle = ExPASy.get_sprot_raw(i)
    record = SwissProt.read(handle)
    sequences.append(record.sequence)
#print sequences

import re
positions=[]

for i in sequences:
    position=[]
    for m in re.finditer("(?=(N[^P][ST][^P]))",i): 
        position.append(m.start()+1)
    positions.append(position)
#    re.findall("N[^P][ST][^P]",i))
#    re.findall("(?=(N[^P][ST][^P]))",i))
for i in range(len(positions)):
    if positions[i]!=[]:
        print idlist[i]
        for j in positions[i]:
            print j,
        print

# <codecell>

##Mendel's first law
import math
numberfile=open("rosalind_iprb.txt")
numbers=numberfile.readline()
numbers=numbers.split(" ")
numbers=[int(numbers[i]) for i in range(len(numbers))] #list comprehension k,m,n
#print numbers
n=float(sum(numbers))
total_choose=float(math.factorial(n)/(2*math.factorial(n-2)))
homos=[math.factorial(i)/(2*math.factorial(i-2))/total_choose for i in numbers]
heteros=[numbers[0]*numbers[1]/total_choose,numbers[0]*numbers[2]/total_choose,numbers[2]*numbers[1]/total_choose] #km kn mn
#print homos
#print heteros
probability=homos[0]+homos[1]*.75+heteros[0]*1+heteros[1]*1+heteros[2]*0.5
print probability

##this part is wrong, the question is sampling w/o replacement. But the solution below is with replacement.
#p=[i/total for i in numbers]
#homos=[i**2 for i in p] #kk mm nn
#heteros=[2*p[0]*p[1],2*p[0]*p[2],2*p[1]*p[2]] #km kn mn
#print homos,heteros
#probability=homos[0]+homos[1]*.75+heteros[0]*1+heteros[1]*1+heteros[2]*0.5
#print probability

# <codecell>

##consensus and profile

idfile=open("rosalind_cons.txt","r")
idlist=idfile.readlines()
idlist=("".join([i.rstrip("\n") for i in idlist])).split(">")
idlist=idlist[1:]
import numpy
consensus=""
counts=numpy.matrix([[0]*(len(idlist[0])-13)]*4)
for i in range(13,len(idlist[0])):
      atcgdict={"A":0,"T":0,"C":0,"G":0}
      for j in idlist:
            atcgdict[j[i]]=atcgdict[j[i]]+1
      sorteddict=sorted(atcgdict,key=lambda x:atcgdict[x],reverse=True) ##sort dict according to the value
      consensus=consensus+ sorteddict[0]    ##get the key corresponding to the max value
      sortedkey=sorted(atcgdict)
      sortedvalue=[atcgdict[k] for k in sortedkey]
      counts[:,i-13]=numpy.array(sortedvalue).reshape([4,1])
print

print consensus
for i in range(4):
      print sortedkey[i]+":",
      print str(counts[i,]).strip("[[").strip("]]")

##have format problem when submit: have to keep no space between lines in matrix

# <codecell>

##Mortal Fibonacci Rabbits for 32bits
##since windows system is 32bit, the result exceed the maximum number, so define all the initial values to be long
import numpy as np
n=92
m=17
record=np.matrix([[long(0)]*n]*m)  ##long+int=int
record[0,0]=long(1)
for i in range(1,n):
    record[0,i] = sum(record[1:,(i-1)])
    record[1:,i] = [j for j in record[0:(m-1),(i-1)]]
print sum(record[:,(n-1)])[0,0]

##show how to check the maximum value in the system
import sys
sys.maxint

# <codecell>

##Mortal Fibonacci Rabbits for 32bits 2
import numpy as np
n=92
m=17
record=np.zeros(shape=(m,n),dtype=long)
record[0,0]=1
for i in range(1,n):
      record[0,i] = sum(record[1:,i-1])
      record[1:,i] = [j for j in record[0:m-1,i-1]]
print sum(record[:,n-1])

# <codecell>

##Mortal Fibonacci Rabbits for 64bits
import numpy as np
n=92
m=17
record=np.matrix([[0]*n]*m)
record[0,0]=1
for i in range(1,n):
      record[0,i] = sum(record[1:,i-1])
      record[1:,i] = [j for j in record[0:m-1,i-1]]
print sum(record[:,n-1])[0,0]

# <codecell>

##overlap graphs
graphfile=open("rosalind_grph.txt","r")
graphlist=graphfile.readlines()
graphlist="".join([i.rstrip("\n") for i in graphlist])
graphlist=graphlist.split(">")[1:]
#double iteration list comprehension
edges=[(i[:13]+" "+j[:13]) for i in graphlist for j in graphlist if i[len(i)-3:len(i)]==j[13:16]and i!=j]
for i in edges:
      print i
##cannot use map(print,edges) here because print is a statement, not a function

# <codecell>

##calculate the expected offsrping
offspringfile=open("rosalind_iev.txt","r")
offspringlist=(offspringfile.readline()).split(" ")
offspringlist=[int(i) for i in offspringlist]
prob=[1,1,1,.75,.5,0]
expectednum=[2*i*j for (i,j) in zip(offspringlist,prob)]
print sum(expectednum)

# <codecell>

##find a shared motif
sharefile=open("rosalind_lcsm.txt","r")
sharelist=sharefile.readlines()
sharelist=("".join([i.rstrip("\n") for i in sharelist])).split(">")[1:]

#remove the gene name
start=11
sharelist=[i[start:] for i in sharelist]
TFlist=[False]*len(sharelist)
motiflist=[]
n=len(sharelist[0])

##very slow function,around 2min
def findmotif(sharelist):
      for k in range(1,n)[::-1]:
            for i in range(n-k):
                  TFlist=[True for j in sharelist[1:] if sharelist[0][i:i+k+1] in j]
                  if sum(TFlist)==len(sharelist)-1:
                        return sharelist[0][i:i+k+1]
print findmotif(sharelist)


# <codecell>

##much faster, 5s
def findmotif2(sharelist):
      for k in range(1,n)[::-1]:
            for i in range(n-k):
                  count=0
                  for j in sharelist[1:]:
                        if sharelist[0][i:i+k+1] in j:
                              count=count+1
                        else:
                              break
                  if count==len(sharelist)-1:
                        return sharelist[0][i:i+k+1]

print findmotif2(sharelist)

# <codecell>

##independent Alleles
from math import factorial
k=6 #k-th generation
N=18 #at least N hetero individuals
kthtotal=2**k
prob=0.0
totalfactorial=factorial(kthtotal)

if N> kthtotal/2:
      for i in range(N,kthtotal+1):
            prob=prob + totalfactorial/(factorial(i)*factorial(kthtotal-i))*0.25**i*0.75**(kthtotal-i)
else:
      for i in range(0,N):
            prob=prob + totalfactorial/(factorial(i)*factorial(kthtotal-i))*0.25**i*0.75**(kthtotal-i)
      prob=1-prob
print round(prob,3)

# <codecell>

##inferring mRNA from protein
reversedict={"F":2,"L":6,"I":3,"M":1,"V":4,"S":6,"P":4,"T":4,"A":4,"Y":2,
             "H":2,"Q":2,"N":2,"K":2,"D":2,"E":2,"C":2,"W":1,"R":6,"G":4}
inferfile=open("rosalind_mrna.txt","r")
inferlist=inferfile.readlines()
sequence="".join([i.rstrip("\n") for i in inferlist])
count=3
N=1000000
for i in sequence:
      count=reversedict[i]*count
      if count>N:
            count=count%N
print count

# <codecell>

##locating restriction sites 
resfile=open("rosalind_revp.txt","r")
reslist=resfile.readlines()
resseq="".join([i.rstrip("\n") for i in reslist[1:]])
revcompl={"A":"T","T":"A","C":"G","G":"C"}

def rev_compli(sequence):
      rev_compl_seq=""
      for k in sequence[::-1]:
            rev_compl_seq=rev_compl_seq + revcompl[k]
      return rev_compl_seq

for i in range(4,13):
      startsite=[j+1 for j in range(len(resseq)-i+1) if resseq[j:j+i]==rev_compli(resseq[j:j+i])]
      for m in startsite:
           print m,i

# <codecell>

##RNA Splicing
splicefile=open("rosalind_splc.txt","r")
splicelist=splicefile.readlines()
splicelist=("".join([i.rstrip("\n") for i in splicelist])).split(">")[1:]
premrna=splicelist[0][13:]
intron=[i[13:] for i in splicelist[1:]]

intronstarts=[]
intronends=[0]
import re
for i in intron:
      for j in re.finditer(i,premrna):
            intronstarts.append(j.start())
            intronends.append(j.start()+len(i))
intronstarts.append(len(premrna))            
spliced=""
for (i,j) in zip(sorted(intronends),sorted(intronstarts)):
      spliced=spliced + premrna[i:j]
      
codon={"TTT":"F","TTC":"F","TTA":"L","TTG":"L","CTT":"L","CTC":"L","CTA":"L",
    "CTG":"L","ATT":"I","ATC":"I","ATA":"I","ATG":"M","GTT":"V","GTC":"V",
    "GTA":"V","GTG":"V","TCT":"S","TCC":"S","TCA":"S","TCG":"S","CCT":"P",
    "CCC":"P","CCA":"P","CCG":"P","ACT":"T","ACC":"T","ACA":"T","ACG":"T",
    "GCT":"A","GCC":"A","GCA":"A","GCG":"A","TAT":"Y","TAC":"Y","TAA":" ",
    "TAG":" ","CAT":"H","CAC":"H","CAA":"Q","CAG":"Q","AAT":"N","AAC":"N",
    "AAA":"K","AAG":"K","GAT":"D","GAC":"D","GAA":"E","GAG":"E","TGT":"C",
    "TGC":"C","TGA":" ","TGG":"W","CGT":"R","CGC":"R","CGA":"R","CGG":"R",
    "AGT":"S","AGC":"S","AGA":"R","AGG":"R","GGT":"G","GGC":"G","GGA":"G",
    "GGG":"G"}

translated=""
for i in range(0,len(spliced),3):
      translated=translated + codon[spliced[i:i+3]]
print translated

# <codecell>

##enumerating k-mers lexicographically
import itertools
ordered="P B N C Y S A O"
k=3
ordered=[ordered.split(" ")]*k
dictionary=[""]
#######################Novel Thinking###########################
for i in ordered:
      dictionary=[m+n for m in dictionary for n in i]
#######################really important##########################
for i in dictionary:
      print i

# <codecell>

##Longest Increasing Subsequence

##two algorithm
##fist one, BINARY SEARCH

n=8514
permutations
permutations=[int(i) for i in permutations.split(" ")]

##increasing
end_at_m = [1]  ##the length of the sequence when it end at position m
last_end = [None]  ##record the parent position of each position m
for i in range(1,n):
      length=1
      ##for each new position i,compare it to the iterms in the previous positions j
      ##if larger than permutations[j], then its length = length at j + 1,
      ##and find the maximum of the length, and set it to be the length of the new position
      ##Meanwhile, record the which previous position j lead to this maximum length at position i
      for j in range(len(end_at_m)):
            if permutations[i] > permutations[j] and (end_at_m[j]+1)>length:
                  length = end_at_m[j]+1
                  previous = j
      end_at_m.append(length)
      if length==1:
            last_end.append(None)
      else:
            last_end.append(previous)            
maximum = max(end_at_m)                  
end=[i for i in range(n) if end_at_m[i] ==maximum][0]

sequence=[permutations[end]]         
while len(sequence)!= maximum:
      end = last_end[end]
      sequence.append(permutations[end])
for i in sequence[::-1]:
      print i,
print


##decreasing
end_at_m = [1]  ##the length of the sequence when it end at position m
last_end = [0]  ##record the parent position of each position m
for i in range(1,n):
      length=1
      for j in range(len(end_at_m)):
            if permutations[i] < permutations[j] and (end_at_m[j]+1)>length:
                  length = end_at_m[j]+1
                  previous = j
      end_at_m.append(length)
      if length==1:
            last_end.append(0)
      else:
            last_end.append(previous)            

maximum = max(end_at_m)                  
end=[i for i in range(n) if end_at_m[i] ==maximum][0]

sequence=[permutations[end]]
          
while len(sequence)!= maximum:
      end = last_end[end]
      sequence.append(permutations[end])
for i in sequence[::-1]:
      print i,

# <codecell>

##Longest Increasing Subsequence
##Algorithm 2
##http://stackoverflow.com/questions/2631726/how-to-determine-the-longest-increasing-subsequence-using-dynamic-programming

## Scan through the permutations list only once

## For each new item added to the existing subsequence, record its indices in
## another list called "indices", whose length is the same as the subsequence

## If a new item is larger than the last element of the existing subsequence,
## then append this item at the end of the sequence, and record the parent of
## this element as the indix of the last element in the existing list.

## If a new item is smaller than the first element of the existing subsequence,
## then replace the first element of the subsequence with this new item, and record
## its parent as none, as it don't have any item smaller than it

## If a new item is otherwise in the middle of the (sorted)existing subsequence,
## use the BINARY SEARCH funtion to find its position, and replace the item slightly
## 

##BINARY SEARCH

def find_replace(seq,element):
      small=0
      large=len(seq)-1
      middle=(small + large)/2
      while element < seq[middle] or element > seq[middle+1]:
            if element > seq[middle]:
                  small=middle
                  middle = (small + large)/2
            else:
                  large=middle
                  middle = (small + large)/2            
      if element > seq[middle] and element < seq[middle+1]:
            return middle+1,middle

n=8514
permutations
permutations=[int(i) for i in permutations.split(" ")]

##increasing
parent=[None]
sequence=[permutations[0]]
indices = [0]

for i in range(1,n):
      if permutations[i] > sequence[-1]:
            parent.append(indices[-1])
            sequence.append(permutations[i])
            indices.append(i)
      elif permutations[i] < sequence[0]:
            parent.append(None)
            sequence[0] = permutations[i]
            indices[0] = i
      else:
            sites = find_replace(sequence,permutations[i])
            parent.append(indices[sites[1]])
#            print site
            sequence[sites[0]] = permutations[i]
            indices[sites[0]] = i
#      print sequence

end=[i for i in range(n) if permutations[i]== sequence[-1]][0]
rev_seq = [sequence[-1]]
rev_indices=[end]
while len(rev_seq) != len(sequence):
#      print end
      end = parent[end]
      rev_seq.append(permutations[end])
#      rev_indices.append(parent[end])
for i in rev_seq[::-1]:
      print i,

# <codecell>

##Genome Assembly as Shortest Superstring
Assemblefile = open("rosalind_long.txt","r")
Assemblelist = Assemblefile.readlines()
Assemblelist = ("".join([i.rstrip("\n") for i in Assemblelist])).split(">")[1:]
k=9+4
Sequences = [i[k:] for i in Assemblelist]

##find pairwaise matches
Matches = {}
for i in range(len(Sequences)):
      count = 0
      length = len(Sequences[i])
      for j in range(len(Sequences)):
            if i != j and Sequences[i][:length/2] in Sequences[j]:
                  count = 1
                  Matches[j] = i
      if count == 0:
            Matches["start"] = i

##sort those pairwise matches into a sequence of indexes
last = Matches["start"]
sorted_sequences = [Matches["start"]]
del(Matches["start"])
while len(Matches) !=0:
    sorted_sequences.append(Matches[last])
    del(Matches[last])
    last = sorted_sequences[-1]
      
##define the function that can find the maximum overlap between two sequences            
def find_overlap_length(sequence1,sequence2):
      for i in range(len(sequence1)):
            overlap = 0
            for m,n in zip(sequence1[i:],sequence2):
                  if m !=n:
                        break
                  else:
                        overlap = overlap + 1
            if overlap == len(sequence1[i:]):
                  return overlap

##use the function defined above to remove the overlapped sequence in the 2nd sequence
##use this function iteratively for each pair of sequences in the already sorted order
complete_sequence = Sequences[sorted_sequences[0]]      
for i in range(len(sorted_sequences)-1):    
      sequence1 = Sequences[sorted_sequences[i]]
      sequence2 = Sequences[sorted_sequences[i+1]]
      overlap = find_overlap_length(sequence1,sequence2)
      extra = sequence2[overlap:]
      complete_sequence = complete_sequence + extra
print complete_sequence

# <codecell>

##Perfect Matchings and RNA Secondary Structures
from math import factorial
Matchfile = open("rosalind_pmch.txt","r")
Matchlist = Matchfile.readlines()[1:]
Sequence = "".join([i.rstrip("\n") for i in Matchlist])
AU_CG = {'A':0,'C':0}
for i in Sequence:
      if i in AU_CG:
            AU_CG[i] = AU_CG[i] + 1
print factorial(AU_CG["A"])*factorial(AU_CG["C"])

# <codecell>

##Enumerating Oriented Gene Orderings
import itertools 
k=4
half = range(1,k+1)
permutations=itertools.permutations(half)
signs = itertools.product("+-",repeat = k)
positive_list = []
sign_list = []
for i in permutations:
      positive_list.append(list(i))      
for i in signs:
      sign_list.append(list(i))
count = 0
for i in positive_list:
      for j in sign_list:
            count = count + 1
            for m,n in zip(i,j):
                  if n == "+":
                        print m,
                  else:
                        print -m,
            print
print count

# <codecell>

##Finding a Spliced Motif
sequence = "GAACTATGATAAAAGTCCGACTACATACTCCGCGCTGGCCATTGCTTGGTGTTACGTCCAATCGCACATCAGCCTGAACTGGGTCCGGGCAGACGGACTGGATGGGAGCAGAGTGTCAAGTGAAATAAAAATCTTTGGTATACGCTGGGGTCGAACGATAACTAACACAGTCGGACGAATGACAGTAGCGCACCAACTAGCCGTTCTGAGTGCCCCAGTCACCTGAATGTTGAGTACTGTAGACAACCTAACGGTTCGACTGCCGCAATATACGATATTCGGAAATGTAATCTATGGCACGGCCATGCCCTGCACATGTTTTTGGTGGCAATCAACACAGTTGGTTATTACAGTTAACGAGAGGCTTTGACTCATGGTGTTAGAGTTAAGTACTAGACAGGAATGGTCGATCCATGGTTTTAACGGCGTGTTACCGATAATCCTACCTGGGGCTATCAAAGTCCCAGGGAACGTTGGCGTTACCGATGCTTCGCGTATCTAAAATTCGGTATTTCTGTGACTTGGCCGTCCAGGAGCCGTTTAGTGAAATGTAACTCGCCTTTGTATTGCGGGTGGTTGCGGACGAAACAAAAGCTGTAACGACCCTCGGGAATGCAAGACGAGGCGCTGGGCAGGATCAAATTCTCAGTTCACGGCAAAAGACGGTAAGACCCTAATCGAGTTGCAAATAATTTCCTCTCTGCATCTTATAGTAATATCAGAATGATTCAGTGATCTAACAACTATCGACTTGTAGACTATACGTAGGTAAGGGCAACAGTCGTTTGCGGTCTAAGGTTGTCCGTTTTAAGTCTAAAT"
motif = "CATTGCAGGACG"
i=0
for index in range(len(sequence)):
      if motif[i] == sequence[index]:
            i = i+1
            print index+1,

# <codecell>

##transition and transversion
sequence1 = "AACTGCGATACGCTTAGTAGGCCGCGCTCAGGAATAGGAATACGAAGGCCACGGTTAAAGCAATTCGGTACACGGGTGGGGTTACAAAATAGTGGCAATCAAGGGGCGCTACGTTTAGCAGCAAAGGGTCGCCGCCCACAGGAAATGAGTGTTGCAACACTCAATTTGAATCCATCTTGAAGTTCGTATATGGGACTCAAAATAGAGCGAACCGCATGAGACTCCGCCGGGCGTTTCAAAGGTCCCGCCTTATCCCTGAGAAAACTACGAAGCTAGTCCCACGAAATCCGTCGTAACTAAATGTGCCTGGAACCTCCTACACTCTGTTGACCACTTGGTCTACATTGGTTGCGTTAAGGCCTGACAACTAGCAGAGACTGGATTTTCGCGTGACTGTCCAGTGAAGCGTAGTGCAAGGACAGGTTATCTTGGCCTATCGTTCTCAACTTGTCAGTCTACATCAGAACTCCTCAGAAGCATCAGCAGCACTTCGTAGAATGATACAACCAGGAGTATTATGGTTTAGCTCGGGTTGACATACGTATTCAAACTGTATAGAGTCTGGGCTGATGTTGATCTGGCAGAGCCTTTGATCTACTACCATTCATATAGTCGTCACTTCCCCCTAACACACATCGATCCTTGGCTGCGGCTGGTCCTAAACAGATTCAGGTAGTCCAGTTTAAGAAGGTAAACGAACAAATATAAAGCTGGTTTGAGAGCACAGACAACATCTTCAGGTAGCCATACCCTGAGCATTATGGAACGAGGCCTGACGAGATGACAGAAGACAGAAAGGCGCACGTTTGACAGGGAAGCAGGGTTTCATCCCCGTCTACGCGGGTATTGTACTAGACCAAGCTGTCCAGGCCGCGTCTTGGGCCTAAATATGTCTATG"
sequence2 = "TGCAGCGATATGTATAACGCACCGTGGTAAGTGTTAAAAGTATAAAGATCGCGGCCAAATTGATTCGGTACATGGGTGGGACTACGAAATTGTAGTGATCGAGGGACACTCCGCTTGACAAGAAAGAGTCGCTGCGCGCAGGAGGACAGGACCGTAACGCATAGTTTGGATCTATTTTGCAGTTTGCACAAACCACTCGCAGTAAATCGAACGGCATGAGGCTGTGCCGGGCGATTCAGAGATTCTGCCTTGTCCTTGAGAAAACTAGGCAGTTATTTTCACAGGATCAGTCGTAACTCAAGGTGTCCAGACCCTCCTATACCCCGTTGACCACTTGGTTGATAACGGATACGTCAAGCCCTCGTAACTCGCAGAGACAAGATTTTTGCGTGACTGGCCAGTGAAGCGCAGTGTGTGAAGAGGCTATCTATGCCTGTTGTTCTTGGCTCGCTGGCTTACACTGGAACACCAAAGAAACACCGGCAAAGTCTCGTAGAGTACTATAACCTGGGGTATCATGGTTTAGCTCGGCTCGACATATACGCTCAGACTATATAGACTCTAAGCCGATGTCAGCTTGGTCGAGTTTCTGGCATACTAACATGCAAATAGGCGCTGGATACCCCTAACACACATCAAACCCCAGCTGAAGCTGGTTCTAAACACACTCAGGTAGTCGAGTTCTAAAAGGTACATTAACAAATGCAAAGGTGGATTAAAAGCACAGACAACTCGTTCAGGTTGCCATGCCCTGAGCGTCACAGAACGGGGCTTGACGGGATTATAGGGGATAGAAAGGCGGACGTCCGCCAGGGGATCAGAGCTTTATCCTCTTGTGCACCAGTATGGTTCTATACCTAGCTGTCTAGATTGCGTGTCCGGCCTAATTGTATCTATG"
transition = 0.0
transversion = 0.0
category = {"A": "purine","G":"purine","T":"pyrimidine","C":"pyrimidine"}
for i,j in zip(sequence1,sequence2):
      if i!=j and category[i]==category[j]:
            transition = transition+1
      elif i!=j and category[i] != category[j]:
            transversion = transversion +1
print transition/transversion

# <codecell>

##Completing a Tree (Algorithm 1)
treefile = open("rosalind_tree.txt","r")
treelist = treefile.readlines()
n = int(treelist[0])
treelist = [i.rstrip("\n") for i in treelist][1:]

##create the adjacency list "edges" that contain all the edges in pairs
edges = []
for i in treelist:
      i = [int(j) for j in i.split(" ")]
      edges.append(i)

##define a function that can loop over the sequence many times until find all
##the members that belong to the same group as the first element in the sequence      
##and then remove all the edges that belong to this group
##then return the group and the truncated list of edges
def group_first_item(sequence):
      count = 0
      temp_group = sequence[0]
      while count != len(sequence)-1:
            count = 0
            for i in range(1,len(sequence)):
                  if sequence[i] == []:
                        count = count +1
                  elif sequence[i][0] in temp_group:
                        temp_group.append(sequence[i][1])
                        sequence[i] = []
                  elif sequence[i][1] in temp_group:
                        temp_group.append(sequence[i][0])
                        sequence[i] = []
                  else:
                        count = count +1
      sequence = [i for i in sequence[1:] if i !=[]]
      return sequence,temp_group            

##for each element in edges, find the group of the first element
##and do it again in the truncated list of edges
##until all the elements in the list of edges have been removed
group = []
while len(edges) != 0:
      result = group_first_item(edges)
      group.append(result[1])
      edges = result[0]
      
##find how many nodes are included in the list
##and how many nodes are left over
nodelist = [int(j) for i in treelist for j in i.split(" ")]
included = []
for i in nodelist:
      if i not in included:
            included.append(i)

##The # of edges need to be added = # of groups + # of leftover nodes -1
print len(group)+(n-len(included))-1

# <codecell>

##Completing a Tree (Algorithm 2)
treefile = open("rosalind_tree.txt","r")
treelist = treefile.readlines()
n = int(treelist[0])
treelist = [i.rstrip("\n") for i in treelist][1:]

edges = []
for i in treelist:
      i = [int(j) for j in i.split(" ")]
      edges.append(i)

####create a list with length = n
####each item correspond to the neighbors of a node
####e.g. list[0] contain all the nodes neighboring to node 1 ....
each_node = [[]]*n
for i,j in edges:
      ##the label of the nodes start from 1
      ##but the indices start from 0
      each_node[i-1] = each_node[i-1] + [j-1]
      each_node[j-1] = each_node[j-1] + [i-1]

##Create a new list that contains [1......n]
##for each time you find a group, delete the items in the group from this list L
##and for each item, check whether it has already been deleted (due to earlier groups)
##if not (i.e.) if it is still in L
##create 3 lists: group (contain all the members of this group)
##                trunk (contain all the nodes at the current level)
##                branch(contain all the nodes at the next level)
##for each node in each trunk's adjacency list, check whether this node is already accounted in group
##if not (so it is not in earlier levels), add it in the branch (next level)
L = range(n)
count = 0
for i in range(n):
      if i in L:
            group = [i]
            trunk = [i]
            branch = []
            while len(trunk) != 0:
                  for j in trunk:
                        for k in each_node[j]:
                              if k not in group:
                                    branch.append(k)
                  group = group + branch
                  trunk = branch
                  branch = []
##Considering the possibility that the group only contain this one point
##so there is no edges involving this node in the adjacency list
##excluding these situations are the cases you get a whole group
#            if len(group) !=1:  
            count = count +1
            for item in group:
                  L.remove(item)


##otherwise, in the last part
##            if len(group) !=1:  
##                  count = count +1
##if you only ignore the if condition, then it will return you the number of
##groups (considering the single points as a group)
##so  # of edges needed = # of groups -1
print count -1

# <codecell>

##Completing a Tree (Algorithm 3)
treefile = open("rosalind_tree.txt","r")
treelist = treefile.readlines()
n = int(treelist[0])
treelist = [i.rstrip("\n") for i in treelist][1:]

##if you have n nodes
##then to connect them into a tree (i.e. without cycles), you only need n-1 edges
##considering we already have k groups (including those single points)
##then for each edge added, you reduce the # of groups by 1
      ##no matter this newly added edge connect two single points
      ##or connect 1 single point to another larger group
##Since you already have m edges
##that means you already reduce the points to n-m groups
##and you want them to be eventually 1 group
##so you still need n-m-1 edges

print n-len(treelist)-1

# <codecell>

##Error Correction in Reads
corrfile = open("rosalind_corr.txt","r")
corrlist = corrfile.readlines()
corrlist = ("".join([i.rstrip("\n") for i in corrlist])).split(">")[1:]
k = 4
name = 9 + k

def get_reverse_compliment(sequence):
      reverse_compl = {"A":"T","T":"A","C":"G","G":"C"}
      rev_seq = ""
      for i in sequence[::-1]:
            rev_seq = rev_seq + reverse_compl[i]
      return rev_seq

allreads = {}
for i in corrlist:
      seq = i[name:]
      rev_seq = get_reverse_compliment(seq)
      if seq in allreads:
            allreads[seq] = allreads[seq] +1
            allreads[rev_seq] = allreads[rev_seq] +1
      else:
            allreads[seq] = 1
            allreads[rev_seq] =1
correct = {}
incorrect = {}
for i in allreads:
      if allreads[i] ==1:
            incorrect[i] = allreads[i]
      else:
            correct[i] = allreads[i]

def count_Hamming_distance(seq1,seq2):
      count = 0
      for i,j in zip(seq1,seq2):
            if i !=j:
                  count = count +1
      return count
                  
      
for i in corrlist:
      seq = i[name:]
      if seq in incorrect:
            for j in correct:
                  Hamming = count_Hamming_distance(seq,j)
                  if Hamming ==1:
                        print seq+"->"+j

# <codecell>

##Catalan Numbers and RNA secondary Structures
from numpy import matrix
sequence = "AUGAGCGCCGCGUACGUGCCGUUCGAAGGCGCAAUUCGUACUCGAAGCUAAUUCGCCGUAAAGCUUUAAUCGAGCUCGGCCGGCGCCACGUAUAAUACGUAGCUUGCGGCAUUCCGGAAUGUAACGUCACGUCGACGCUAGAUCGUAUUAUAAUAUAAAUUUGUAUGCAAUAUCAGCUAGCUAUUUAAUAUAAAUUACGUUCGAUCUAUAUCGAGCGGAAUUCAAUGCUUAAUUACGUGCCGAUUACGAAUCUAGAUCGAUAGCUUAAGUACCG"
n = len(sequence)
allpositions = {"A":[],"U":[],"C":[],"G":[]}
for i in range(len(sequence)):
      allpositions[sequence[i]].append(i)

def separate_before_after(positions,position):
      number = {}
      before = {}
      after = {}
      for i in positions:
            if positions[i] == []:
                  number[i]=0
                  before[i] = []
                  after[i] = []
            elif position < positions[i][0]:
                  number[i] = -1
                  before[i] = []
                  after[i] = positions[i]
            elif position >= positions[i][-1]:
                  number[i] = len(positions[i])
                  before[i] = positions[i]
                  after[i] = []
            ##Binary search
            else:
                  low = 0
                  high = len(positions[i])-1
                  middle = (low + high)/2
                  while middle - low >0:                        
                        if position < positions[i][middle]:
                              high = middle
                              middle = (low + high)/2 
                        else:
                              low = middle
                              middle = (low + high)/2
                  number[i] = middle
                  before[i] = positions[i][:middle+1]
                  after[i] = positions[i][middle+1:]
      if number["A"] ==number["U"] and number["C"]==number["G"]:
            return before,after
      else:
            return False
      
complementary = {"A":"U","U":"A","G":"C","C":"G"}           
memory = matrix([[-1L]*n]*n)  ##################Important to set matrix elements to be long (same as Mortal Fibonacci Rabbit problem)

def count_pair(start,end,locations):
      if memory[start,end] != -1:
            return memory[start,end]
      elif end-start <1:
            memory[start,end] = 0
            return 0
      elif end-start ==1:
            if complementary[sequence[end]] == sequence[start]:
                  memory[start,end] = 1
                  return 1
            else:
                  memory[start,end] = 0
                  return 0
      else:
            ## subset the list and call the function again
            pair = complementary[sequence[start]]
            count = 0
            for i in locations[pair]:
                  if start % 2 != i %2:
                        check = separate_before_after(locations,i)
                        if check != False:
                              before = check[0]
                              before[sequence[start]] = before[sequence[start]][1:]
                              before[sequence[i]]= before[sequence[i]][:-1]
                              after = check[1]
                              if i - start == 1:
                                    before = []#
                                    before_num = 1
                                    after_num = count_pair(i+1,end,after)
                              elif i == end:
                                    before_num = count_pair(start+1,i-1,before)
                                    after = []
                                    after_num = 1
                              else:
                                    before_num = count_pair(start+1,i-1,before)
                                    after_num = count_pair(i+1,end,after)
                              count = count + before_num * after_num
                              if count > 1000000:
                                    count = count % 1000000
            memory[start,end] = count
            return count
print count_pair(0,n-1,allpositions)

# <codecell>

##K-mer composition

##enumerating k-mers lexicographically
import itertools
ordered=[["A","C","G","T"]]*4

kmerid=[""]
#######################Novel Thinking###########################
for i in ordered:
      kmerid=[m+n for m in kmerid for n in i]
#######################really important##########################
kmerdict = {}
for i in kmerid:
      kmerdict[i] =0

kmerfile = open("rosalind_kmer.txt", "r")
kmerlist = kmerfile.readlines()
kmerlist = "".join([i.rstrip("\n") for i in kmerlist[1:]])

for i in range(len(kmerlist)-3):
      kmerdict[kmerlist[i:i+4]] = kmerdict[kmerlist[i:i+4]] +1

for i in kmerid:
      print kmerdict[i],

# <codecell>

##Speeding Up Motif Finding

failurefile = open("rosalind_kmp.txt","r")
failurelist = failurefile.readlines()[1:]
sequence = "".join([i.rstrip("\n") for i in failurelist])

failure = [0]
for i in range(1,len(sequence)):
      ck_1 = failure[-1]
      for j in range(i-ck_1, i+1):
            if sequence[j:i+1] == sequence[0: 1+i-j]:
                  failure.append(i-j+1)
                  break
      if len(failure) != i+1:
            failure.append(0)

to_print = ""      
for i in failure:
      to_print = to_print + str(i) + " "
result = open("result.txt","w")
result.write(to_print)
result.close()

# <codecell>

##Finding a Shared Spliced Motif

motiffile = open("rosalind_lcsq.txt","r")
motiflist = motiffile.readlines()
motiflist = ("".join([i.rstrip("\n") for i in motiflist])).split(">")[1:]


sequence1 = motiflist[0][13:]
sequence2 = motiflist[1][13:]
m = len(sequence1)
n = len(sequence2)

import numpy
sublen = numpy.matrix([[0]*m]*n)
traceback = numpy.array([[{"a":-1,"b":-1}]*m]*n)

##Initialize the first row and first column
for i in range(0,m):
      if sequence1[i]==sequence2[0]:
            break
sublen[0,i:] = 1
traceback[0,i+1:] = [{"a":0,"b":j} for j in range(i,m-1)]

for i in range(0,n):
      if sequence2[i]==sequence1[0]:
            break
sublen[i:,0] = 1
traceback[i+1:,0] = [{"a":j,"b":0} for j in range(i,n-1)]

##store the last position of ATCG's
lastATCG = [{"A":-1,"T":-1,"C":-1,"G":-1}]
for i in range(0,n):
      lastATCG[i][sequence2[i]] = i
      lastATCG.append(lastATCG[i].copy())
      
for i in range(1,n):
      for j in range(1,m):
            lastaligned = lastATCG[i][sequence1[j]]
            if lastaligned < 0:
                  newlength = 0
            elif lastaligned == 0:
                  newlength = 1
            else:
                  newlength = sublen[lastaligned-1,j-1] + 1
            if newlength > sublen[i,j-1]:
                  sublen[i,j] = newlength
                  traceback[i,j] = {"a": lastaligned-1, "b": j-1}
            else:
                  sublen[i,j] = sublen[i,j-1]
                  traceback[i,j] = {"a":i, "b":j-1}

currenta=n-1
currentb=m-1
nextstate = traceback[n-1,m-1]
nexta=nextstate["a"]
nextb=nextstate["b"]
subseq = []
while nexta!=-1 and nextb!=-1: 
      if currenta == nexta or currentb == nextb:
            pass
      else:
            subseq.append(sequence2[nexta+1])
            #print nextstate
      currenta = nexta
      currentb = nextb
      nextstate = traceback[currenta,currentb]
      nexta=nextstate["a"]
      nextb=nextstate["b"] 
if nexta==-1 or nextb == -1 and sequence1[nextb+1] ==sequence2[nexta+1]:
      subseq.append(sequence1[nextb+1])
subseq = "".join(subseq[::-1])

# <codecell>

##Ordering Strings of Varying Length Lexicographically
ordered="Q Y A V S M X L D E"
ordered = ordered.split(" ")
k=4
toadd = [([" "]+ ordered)]*(k-1)
dictionary= ordered
#######################Novel Thinking###########################
for i in toadd:
      dictionary=[m+n for m in dictionary for n in i if (m[-1] !=" " or m[-1]==" " and n==" ")]
#######################really important##########################
newfile = open("lexsical.txt","w")
for i in dictionary:
      newfile.write(i+"\n")
newfile.close()

# <codecell>

##Maximum Matchings and RNA Secondary Structures
from math import factorial
sequence = "GUCAGCUUGGUGACCGAACGAGCCGGUUUCCUCGGCAUCCGCCUGUGAUCAUCGCCAGUCAUCGAGAAUCAUUAAAUCAAGUC"
number = {}
for i in sequence:
      if i in number:
            number[i] = number[i] +1
      else:
            number[i] = 1

product = 1
for i,j in [["A","U"],["G","C"]]:
      if number[i]==number[j]:
            halfnumber = factorial(number[i])
      else:
            m = max(number[i],number[j])
            n = min(number[i],number[j])
            halfnumber = factorial(m)/factorial(m-n)
      product = product * halfnumber

# <codecell>

##Creating a Distance Matrix

disfile = open("rosalind_pdst.txt","r")
dislist = disfile.readlines()
dislist = ("".join([i.rstrip("\n") for i in dislist])).split(">")[1:]
dislist = [i[13:] for i in dislist]
n = len(dislist)

import numpy
distances = numpy.matrix([[0.0]*n]*n)
for i in range(n):
      for j in range(i+1,n):
            count = 0.0
            for a,b in zip(dislist[i],dislist[j]):
                  if a !=b:
                        count = count +1
            freq = count / len(dislist[i])
            distances[i,j] = freq
            distances[j,i] = freq

for i in range(n):
      for j in range(n):
           print distances[i,j],
      print

# <codecell>

##Reversal Distance

##Read and Process the data given
revfile = open("rosalind_rear.txt","r")
revlist = revfile.readlines()
revlist = [i.rstrip("\n") for i in revlist]
fromlist =[]
tolist = []
for i in range(len(revlist)):
      if i%3 ==0:
           fromlist.append(revlist[i])
      elif i%3 ==1:
            tolist.append(revlist[i])

##Count break point (the point where the number before and the number after are not consecutive)
def count_breakpoints(permutations):
      breakpoints = []
      for i in range(len(permutations)-1):
            if abs(permutations[i+1]-permutations[i])> 1:
                  breakpoints.append(i+1)
      return breakpoints

##For each permutations and its breakpoints, return a list of new permutations and new breakpoints after reversions
def nextlevel_sequences(perms, breakpoints):
      new_perms = [[],[]]
      new_bkpts = [[],[]]
      n = len(breakpoints)
      for i in range(n):
            for j in range(i+1,n):
                  start = breakpoints[i]
                  end = breakpoints[j]
                  if end-start > 1:
                        new = perms[:start] + perms[end-1:start-1:-1] + perms[end:]
################To further improve, can create another function to generate the amount of breakpoints reduced instead of count the ###########
################breakpoints again. Can accomplish that by only considering the numbers before and after the reversion points. If #############
################after reversion, the new[start+1] - old[start] =1 then breakpoint -1. If old[end+1] - new[end] =1, then breakpoint -1#########
                        new_breakpoints = count_breakpoints(new)
                        if new_breakpoints == []: ##Return [[]] if no breakpoints anymore
                              return new,[[]]
                        ##Save the reversions that reduce 1 breakpoints and those that reduce 2 breakpoints separately
                        elif len(new_breakpoints) == n-1: 
                              new_perms[0].append(new)
                              new_bkpts[0].append(new_breakpoints)
                        elif len(new_breakpoints) == n-2:
                              new_perms[1].append(new)
                              new_bkpts[1].append(new_breakpoints)
      ##If there are any reversions that can reduce 2 breakpoints, only return those;
      ##Otherwise, return those that can reduce 1 breakpoints
      if new_perms[1] != []:
            return new_perms[1], new_bkpts[1],2
      else:
            return new_perms[0], new_bkpts[0],1

def reversal_distance(permutations):
      current = [permutations]
      current_breakpoints = [count_breakpoints(permutations)]
      count = 0
      step = 0
      if current_breakpoints == [[]]:
            return step
      while count == 0:
            new_perms =[[],[]]
            new_breakpoints = [[],[]]
            step = step + 1
            for i,j in zip(current,current_breakpoints):
                  new = nextlevel_sequences(i,j)
                  if new[1] ==[[]]:
                        count = 1
                        return step
                  elif new[2] == 2:
                        new_perms[1] = new_perms[1] + new[0]
                        new_breakpoints[1] = new_breakpoints[1] + new[1]
                  elif new[2] == 1 and new_perms[1] !=[]:
                        pass
                  else:
                        new_perms[0] = new_perms[0] + new[0]
                        new_breakpoints[0] = new_breakpoints[0] + new[1]
      ##If there are any reversions that can reduce 2 breakpoints, only return those;
      ##Otherwise, return those that can reduce 1 breakpoints
            if new_perms[1] !=[]:
                  current = new_perms[1]
                  current_breakpoints = new_breakpoints[1]
            else:
                  current = new_perms[0]
                  current_breakpoints = new_breakpoints[0]

for m in range(len(fromlist)):
      perm1 = [int(i) for i in fromlist[m].split(" ")]
      perm2 = [int(i) for i in tolist[m].split(" ")]
      positions = {perm1[i]:i+1 for i in range(len(perm1))}
      tau_1 = [positions[i+1] for i in range(len(perm1))] ##tau^-1 is the order of tau (perm1, the items in fromlist)
      tau_sig = [0]+[tau_1[i-1] for i in perm2]+[11] ##tau^-1 *sigma is take the items in tau_1 in the order specified by perm2
      ##Add 0 and 11 to restrict the direction
      print reversal_distance(tau_sig),



##Reference: Exact and Approximation Algorithms for Computing Reversal Distances in Genome Rearrangement
##page 12-15

# <codecell>

##Matching Random Motifs
N = 98270
x = 0.474207
GC = {"A":.5-x/2, "T":.5-x/2, "G":x/2, "C":x/2}
substring = "ACCGAGGG"

prob = 1.0
for i in substring:
      prob = prob*GC[i]

print round(1-(1-prob)**N,3)

# <codecell>

##Counting Subsets
n = 955
print (2**n)%1000000

# <codecell>

##Introduction to Alternative Splicing
from math import factorial
n=1763
m=817
count =0
for k in range(m,n):
      count = count  + factorial(n)/(factorial(k)*factorial(n-k))
      if count > 1000000:
            count = count % 1000000
print count+1

# <codecell>

##Edit Distance
######Cannot use the code in "Finding a Shared Spliced Motif"
######as insertion and deletion may happen in both sequences 
######idea of BLAST

import numpy
motiffile = open("rosalind_edit .txt","r")
motiflist = motiffile.readlines()
motiflist = ("".join([i.rstrip("\n") for i in motiflist])).split(">")[1:]
sequence1 = motiflist[0][13:]
sequence2 = motiflist[1][13:]

m = len(sequence1)
n = len(sequence2)
distance = numpy.matrix([[0]*(m+1)]*(n+1))

##Initialize first row and first column
distance[0,:] = range(m+1)
distance[:,0] = numpy.reshape(range(n+1),(n+1,1))

##Scan through each row
for i in range(1,n+1):
      for j in range(1,m+1):
            if sequence2[i-1] == sequence1[j-1]:
                  extend = distance[i-1,j-1]
            else:
                  extend = distance[i-1,j-1]+1
            distance[i,j] = min(distance[i-1,j]+1,extend,distance[i,j-1]+1)

# <codecell>

##Expected Number of Restriction Sites

##Notice: in sequence of length n, we only have n-1 pairs
restrfile = open("rosalind_eval.txt","r")
restrlist = restrfile.readlines()
restrlist = [i.rstrip("\n") for i in restrlist]
n = int(restrlist[0])
substring = restrlist[1]
GCcontent = [float(i) for i in restrlist[2].split(" ")]
for i in GCcontent:
      eachprobs = {"A": .5-i/2, "T": .5-i/2, "G": i/2, "C": i/2}
      prob = 1
      for j in substring:
            prob = eachprobs[j]*prob
      print prob*(n-1),

# <codecell>

##Motzkin Numbers and RNA Secondary Structures
from numpy import matrix
sequence = "CGGCCUGCGGAUGGACUUCGUGCUUCUACUGUAGUUGUCAGGUUGGCUGACUCGCUCACCAGACUAUGCCGUGGACGGACACACCACAUUGGUCCCCACAGUCGAGUCCCAGGAAGUGCUUGUUUAAAGGCCUUUUAUGCUAACAGUGCCUAACCACUCAAUAAGAAUGCCCAAAACGUAUCCGUUUAAGGUCGGUUCGCUGAUGUUAAGGUGUCAGUCUGUUCCGAGAGUGAACGACGCCACCCUACCAAUCCUCGAAGCAGCCGUAUGUUUGAGGAAAUACCAAAUAAAGCUCCCACG"
n = len(sequence)
allpositions = {"A":[],"U":[],"C":[],"G":[]}
for i in range(len(sequence)):
      allpositions[sequence[i]].append(i)

def separate_before_after(positions,position):
      number = {}
      before = {}
      after = {}
      for i in positions:
            if positions[i] == []:
                  number[i]= 0
                  before[i] = []
                  after[i] = []
            elif position < positions[i][0]:
                  number[i] = -1
                  before[i] = []
                  after[i] = positions[i]
            elif position >= positions[i][-1]:
                  number[i] = len(positions[i])
                  before[i] = positions[i]
                  after[i] = []
            ##Binary search
            else:
                  low = 0
                  high = len(positions[i])-1
                  middle = (low + high)/2
                  while middle - low >0:                        
                        if position < positions[i][middle]:
                              high = middle
                              middle = (low + high)/2 
                        else:
                              low = middle
                              middle = (low + high)/2
                  number[i] = middle
                  before[i] = positions[i][:middle+1]
                  after[i] = positions[i][middle+1:]
      return before,after
      
complementary = {"A":"U","U":"A","G":"C","C":"G"}           
memory = matrix([[-1L]*n]*n)  ##################Important to set matrix elements to be long (same as Mortal Fibonacci Rabbit problem)

def count_pair(start,end,locations):
      if memory[start,end] != -1:
            return memory[start,end]
      ##Set the smallest situations differently
      elif end-start <1:
            memory[start,end] = 1
            return 1
      elif end-start ==1:
            if complementary[sequence[end]] == sequence[start]:
                  memory[start,end] = 2
                  return 2
            else:
                  memory[start,end] = 1
                  return 1
      else:
            ## subset the list and call the function again
            pair = complementary[sequence[start]]
            count = 0
            for i in locations[pair]:
                  before,after = separate_before_after(locations,i)[:]
                  before[sequence[start]] = before[sequence[start]][1:]
                  before[sequence[i]]= before[sequence[i]][:-1]
                  if i - start == 1:
                        before = []
                        before_num = 1
                        after_num = count_pair(i+1,end,after)
                  elif i == end:
                        before_num = count_pair(start+1,i-1,before)
                        after = []
                        after_num = 1
                  else:
                        before_num = count_pair(start+1,i-1,before)
                        after_num = count_pair(i+1,end,after)
                  count = count + before_num * after_num     
                  if count > 1000000:
                        count = count % 1000000
      ## Calculate the crossing between start+1 : end
            notinvolved_positions = {i:locations[i] for i in locations}
            if len(locations[sequence[start]]) ==1:
                  notinvolved_positions[sequence[start]] = []
            else:
                  notinvolved_positions[sequence[start]] = locations[sequence[start]][1:]
            notinvolved = count_pair(start+1,end, notinvolved_positions) % 1000000
            memory[start,end] = (count + notinvolved) % 1000000
      return memory[start,end]
print count_pair(0,n-1,allpositions)

# <codecell>


